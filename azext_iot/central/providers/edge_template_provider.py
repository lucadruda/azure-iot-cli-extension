# coding=utf-8
# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

from knack.util import CLIError
from azext_iot.constants import CENTRAL_ENDPOINT
from azext_iot.central import services as central_services


class CentralEdgeTemplateProvider:
    def __init__(self, cmd, app_id, token=None):
        """
        Provider for edge_template APIs

        Args:
            cmd: command passed into az
            app_id: name of app (used for forming request URL)
            token: (OPTIONAL) authorization token to fetch device details from IoTC.
                MUST INCLUDE type (e.g. 'SharedAccessToken ...', 'Bearer ...')
                Useful in scenarios where user doesn't own the app
                therefore AAD token won't work, but a SAS token generated by owner will
        """
        self._cmd = cmd
        self._app_id = app_id
        self._token = token
        self._edge_templates = {}

    def get_edge_template(
        self, edge_template_id, central_dns_suffix=CENTRAL_ENDPOINT,
    ):
        # get or add to cache
        edge_template = self._edge_templates.get(edge_template_id)
        if not edge_template:
            edge_template = central_services.edge_template.get_edge_template(
                cmd=self._cmd,
                app_id=self._app_id,
                edge_template_id=edge_template_id,
                token=self._token,
                central_dns_suffix=central_dns_suffix,
            )
            self._edge_templates[edge_template_id] = edge_template

        if not edge_template:
            raise CLIError(
                "No device template for device template with id: '{}'.".format(
                    edge_template_id
                )
            )

        return edge_template

    def list_edge_templates(
        self, central_dns_suffix=CENTRAL_ENDPOINT,
    ):
        templates = central_services.edge_template.list_edge_templates(
            cmd=self._cmd, app_id=self._app_id, token=self._token,central_dns_suffix=central_dns_suffix
        )

        self._edge_templates.update({template.id: template for template in templates})

        return self._edge_templates

    def map_edge_templates(
        self, central_dns_suffix=CENTRAL_ENDPOINT,
    ):
        """
        Maps each template name to the corresponding template id
        """
        templates = central_services.edge_template.list_edge_templates(
            cmd=self._cmd, app_id=self._app_id, token=self._token
        )
        return {template.name: template.id for template in templates}

    def create_edge_template(
        self,
        edge_template_id: str,
        payload: str,
        central_dns_suffix=CENTRAL_ENDPOINT,
    ):
        template = central_services.edge_template.create_edge_template(
            cmd=self._cmd,
            app_id=self._app_id,
            edge_template_id=edge_template_id,
            payload=payload,
            token=self._token,
            central_dns_suffix=central_dns_suffix,
        )

        self._edge_templates[template.id] = template

        return template

    def delete_edge_template(
        self, edge_template_id, central_dns_suffix=CENTRAL_ENDPOINT,
    ):
        if not edge_template_id:
            raise CLIError("Device template id must be specified.")

        result = central_services.edge_template.delete_edge_template(
            cmd=self._cmd,
            token=self._token,
            app_id=self._app_id,
            edge_template_id=edge_template_id,
            central_dns_suffix=central_dns_suffix,
        )

        # remove from cache
        # pop "miss" raises a KeyError if None is not provided
        self._edge_templates.pop(edge_template_id, None)

        return result
